namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

start = style | templates
# Style
style = element style { info & templates? & citation? & bibliography? }
# Info

# Info Metadata

## TODO
info = element info { text }
# data-types
csl.token = xsd:NMTOKEN
csl.token.list = xsd:NMTOKENS
# Citation
citation = element citation { render.model }
# Bibliography
bibliography = element bibliography { templates?, render.model }
# Templates
templates =
  element templates {
    info?,
    element template { render.model }+
  }
render.model =
  (render.list | render.item | template.conditional)+, template.atts
# Template
template = element template { render.model }
template.atts =
  attribute description { text }?,
  attribute context { text }?,
  attribute name { text }?,
  attribute example { text }?
# Render

## Describes the rendering for an individual reference item.`
render.item = element reference { render.atts, render.fmt }
render.atts =
  attribute variable { render.vars }
  | attribute str { text }
  | attribute term { text }
  | attribute template { csl.token }
render.vars =
  "author" | "editor" | "issued" | "title" | "cited-locators"
render.fmt =
  
  ## a template to call for partial rendering
  attribute template { text }?,
  attribute bold { xsd:boolean }?,
  attribute prefix { text }?,
  attribute suffix { text }?,
  
  ## an attribute whose value is a list of named csl.token operations that transform
  ## the input
  attribute transforms { csl.token.list }?,
  attribute substitute {
    list { render.vars }
  }?
# Render List element
render.list =
  element list {
    render.model,
    
    ## REVIEW Will this work?
    ## if yes, could probably more flexibility
    attribute sort { csl.token }?,
    
    ## a list of variables (or templates?) to group by; a common value might be,
    ## for example, "author date.year"
    attribute group-by { csl.token.list }?,
    
    ## we could do this with transforms, but don't need to
    ## and here we generalize this, so can work in different context
    (attribute shorten-min { xsd:integer },
     attribute shorten-use { xsd:integer })?,
    attribute and-as { "symbol" | "term" }?,
    render.fmt,
    attribute delimiter { text }?
  }

## Conditional
template.conditional =
  element if { condition, render.model },
  element if-then { condition, render.model }*,
  element else { render.model }?
# TODO
condition = attribute mode { "narrative" | "default" }
